#include <iostream>
#include <vector>
#include <algorithm>
#include <chrono>
#include <cmath>
#include <random>
#include <string>

#include <fstream>
#include <numeric>

using namespace std;

// Бинарное дерево поиска (BST)
struct BSTNode {
    int key;
    BSTNode* left;
    BSTNode* right;
    BSTNode(int k) : key(k), left(nullptr), right(nullptr) {}
};

class BST {
private:
    BSTNode* root;

    void clear(BSTNode* node) {
        if (node) {
            clear(node->left);
            clear(node->right);
            delete node;
        }
    }

public:
    BST() : root(nullptr) {}

    ~BST() {
        clear(root);
    }

    void insert(int key) {
        BSTNode** curr = &root;
        while (*curr) {
            if (key < (*curr)->key)
                curr = &(*curr)->left;
            else
                curr = &(*curr)->right;
        }
        *curr = new BSTNode(key);
    }

    bool contains(int key) {
        BSTNode* curr = root;
        while (curr) {
            if (key == curr->key)
                return true;
            else if (key < curr->key)
                curr = curr->left;
            else
                curr = curr->right;
        }
        return false;
    }

    void remove(int key) {
        BSTNode** parent = &root;
        BSTNode* curr = root;
        while (curr) {
            if (key == curr->key) {
                if (!curr->left && !curr->right) {
                    *parent = nullptr;
                    delete curr;
                }
                else if (!curr->left) {
                    *parent = curr->right;
                    delete curr;
                }
                else if (!curr->right) {
                    *parent = curr->left;
                    delete curr;
                }
                else {
                    BSTNode** minParent = &curr->right;
                    BSTNode* minNode = curr->right;
                    while (minNode->left) {
                        minParent = &minNode->left;
                        minNode = minNode->left;
                    }
                    curr->key = minNode->key;
                    *minParent = minNode->right;
                    delete minNode;
                }
                return;
            }
            else if (key < curr->key) {
                parent = &curr->left;
                curr = curr->left;
            }
            else {
                parent = &curr->right;
                curr = curr->right;
            }
        }
    }
};

// AVL-дерево
struct AVLNode {
    int key;
    AVLNode* left;
    AVLNode* right;
    int height;
    AVLNode(int k) : key(k), left(nullptr), right(nullptr), height(1) {}
};

class AVL {
private:
    AVLNode* root;

    int height(AVLNode* node) {
        return node ? node->height : 0;
    }

    int balanceFactor(AVLNode* node) {
        return height(node->right) - height(node->left);
    }

    void updateHeight(AVLNode* node) {
        node->height = 1 + max(height(node->left), height(node->right));
    }

    AVLNode* rotateRight(AVLNode* y) {
        AVLNode* x = y->left;
        AVLNode* T2 = x->right;
        x->right = y;
        y->left = T2;
        updateHeight(y);
        updateHeight(x);
        return x;
    }

    AVLNode* rotateLeft(AVLNode* x) {
        AVLNode* y = x->right;
        AVLNode* T2 = y->left;
        y->left = x;
        x->right = T2;
        updateHeight(x);
        updateHeight(y);
        return y;
    }

    AVLNode* balance(AVLNode* node) {
        updateHeight(node);
        int bf = balanceFactor(node);

        if (bf == 2) {
            if (balanceFactor(node->right) < 0)
                node->right = rotateRight(node->right);
            return rotateLeft(node);
        }
        else if (bf == -2) {
            if (balanceFactor(node->left) > 0)
                node->left = rotateLeft(node->left);
            return rotateRight(node);
        }
        return node;
    }

    AVLNode* insertRec(AVLNode* node, int key) {
        if (!node) return new AVLNode(key);
        if (key < node->key)
            node->left = insertRec(node->left, key);
        else
            node->right = insertRec(node->right, key);
        return balance(node);
    }

    AVLNode* minValueNode(AVLNode* node) {
        AVLNode* current = node;
        while (current->left)
            current = current->left;
        return current;
    }

    AVLNode* removeRec(AVLNode* node, int key) {
        if (!node) return nullptr;

        if (key < node->key)
            node->left = removeRec(node->left, key);
        else if (key > node->key)
            node->right = removeRec(node->right, key);
        else {
            if (!node->left || !node->right) {
                AVLNode* temp = node->left ? node->left : node->right;
                if (!temp) {
                    temp = node;
                    node = nullptr;
                }
                else {
                    *node = *temp;
                }
                delete temp;
            }
            else {
                AVLNode* temp = minValueNode(node->right);
                node->key = temp->key;
                node->right = removeRec(node->right, temp->key);
            }
        }

        if (!node) return nullptr;

        return balance(node);
    }

    void clear(AVLNode* node) {
        if (node) {
            clear(node->left);
            clear(node->right);
            delete node;
        }
    }

public:
    AVL() : root(nullptr) {}

    ~AVL() {
        clear(root);
    }

    void insert(int key) {
        root = insertRec(root, key);
    }

    bool contains(int key) {
        AVLNode* curr = root;
        while (curr) {
            if (key == curr->key)
                return true;
            else if (key < curr->key)
                curr = curr->left;
            else
                curr = curr->right;
        }
        return false;
    }

    void remove(int key) {
        root = removeRec(root, key);
    }
};

int main() {
    const int numSeries = 10;
    mt19937 rng(random_device{}());

    ofstream outFile("results.csv");
    outFile << "series,cycle,data_type,N,bst_insert_time,avl_insert_time,bst_search_time_per_op,avl_search_time_per_op,array_search_time_per_op,bst_delete_time_per_op,avl_delete_time_per_op" << endl;

    cout << "series,cycle,data_type,N,bst_insert_time,avl_insert_time,bst_search_time_per_op,avl_search_time_per_op,array_search_time_per_op,bst_delete_time_per_op,avl_delete_time_per_op" << endl;

    for (int i = 0; i < numSeries; ++i) {
        const int N = pow(2, 10 + i);

        for (int cycle = 0; cycle < 2; ++cycle) {
            vector<int> data(N);

            if (cycle < 1) {
                iota(data.begin(), data.end(), 0);
                shuffle(data.begin(), data.end(), rng);
            }
            else {
                iota(data.begin(), data.end(), 0);
            }

            // Вставка
            BST bst;
            auto start = chrono::high_resolution_clock::now();
            for (int num : data) bst.insert(num);
            auto end = chrono::high_resolution_clock::now();
            auto bstInsertTime = chrono::duration_cast<chrono::microseconds>(end - start).count();

            AVL avl;
            start = chrono::high_resolution_clock::now();
            for (int num : data) avl.insert(num);
            end = chrono::high_resolution_clock::now();
            auto avlInsertTime = chrono::duration_cast<chrono::microseconds>(end - start).count();

            // Генерация ключей для поиска/удаления
            uniform_int_distribution<int> dist(0, N - 1);
            vector<int> searchKeys;
            for (int j = 0; j < 1000; ++j)
                searchKeys.push_back(dist(rng));

            // Поиск в BST
            start = chrono::high_resolution_clock::now();
            for (int key : searchKeys) bst.contains(key);
            end = chrono::high_resolution_clock::now();
            double bstSearchPerOp = chrono::duration_cast<chrono::nanoseconds>(end - start).count() / 1000.0;

            // Поиск в AVL
            start = chrono::high_resolution_clock::now();
            for (int key : searchKeys) avl.contains(key);
            end = chrono::high_resolution_clock::now();
            double avlSearchPerOp = chrono::duration_cast<chrono::nanoseconds>(end - start).count() / 1000.0;

            // Поиск в массиве
            start = chrono::high_resolution_clock::now();
            for (int key : searchKeys)
                find(data.begin(), data.end(), key);
            end = chrono::high_resolution_clock::now();
            double arraySearchPerOp = chrono::duration_cast<chrono::nanoseconds>(end - start).count() / 1000.0;

            // Удаление из BST
            start = chrono::high_resolution_clock::now();
            for (int key : searchKeys) bst.remove(key);
            end = chrono::high_resolution_clock::now();
            double bstDeletePerOp = chrono::duration_cast<chrono::nanoseconds>(end - start).count() / 1000.0;

            // Удаление из AVL
            start = chrono::high_resolution_clock::now();
            for (int key : searchKeys) avl.remove(key);
            end = chrono::high_resolution_clock::now();
            double avlDeletePerOp = chrono::duration_cast<chrono::nanoseconds>(end - start).count() / 1000.0;

            // Вывод данных в CSV
            cout << i << ","
                << cycle << ","
                << (cycle < 1 ? "random" : "sorted") << ","
                << N << ","
                << bstInsertTime << ","
                << avlInsertTime << ","
                << bstSearchPerOp << ","
                << avlSearchPerOp << ","
                << arraySearchPerOp << ","
                << bstDeletePerOp << ","
                << avlDeletePerOp << endl;

            // Запись данных в CSV
            outFile << i << ","
                << cycle << ","
                << (cycle < 1 ? "random" : "sorted") << ","
                << N << ","
                << bstInsertTime << ","
                << avlInsertTime << ","
                << bstSearchPerOp << ","
                << avlSearchPerOp << ","
                << arraySearchPerOp << ","
                << bstDeletePerOp << ","
                << avlDeletePerOp << endl;

        }
    }

    return 0;
}
