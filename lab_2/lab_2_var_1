#include <iostream>
#include <vector>
#include <random>
#include <chrono>
#include <algorithm>
#include <fstream>
#include <sstream>

using namespace std;

// Функция для генерации массива случайных чисел в интервале от -1 до 1
vector<double> generate_random_array(int size) {
    random_device rd;
    mt19937 engine(rd());
    uniform_real_distribution<double> dist(-1.0, 1.0);

    vector<double> array(size);
    for (int i = 0; i < size; ++i) {
        array[i] = dist(engine);
    }
    return array;
}

// Функция partition по схеме Хоара
size_t partition(vector<double>& array, size_t left, size_t right, size_t& swaps) {
    double pivot = array[(left + right) / 2]; // Опорный элемент
    size_t i = left;
    size_t j = right;

    while (i <= j) {
        while (array[i] < pivot) i++; // Ищем элемент, больший или равный опорному
        while (array[j] > pivot) j--; // Ищем элемент, меньший или равный опорному

        if (i >= j) break; // Если индексы пересеклись, выходим

        swap(array[i], array[j]); // Меняем элементы местами
        swaps++; // Увеличиваем счетчик обменов
        i++;
        j--;
    }

    return j; // Возвращаем индекс разделения
}

// Рекурсивная функция быстрой сортировки
void quicksort(vector<double>& array, size_t low, size_t high, size_t& swaps, size_t& calls, size_t& max_depth, size_t current_depth) {
    ++calls; // Увеличиваем счетчик вызовов
    if (current_depth > max_depth) {
        max_depth = current_depth; // Обновляем максимальную глубину рекурсии
    }

    if (low < high) {
        size_t p = partition(array, low, high, swaps); // Разделение массива
        quicksort(array, low, p, swaps, calls, max_depth, current_depth + 1); // Сортировка левой части
        quicksort(array, p + 1, high, swaps, calls, max_depth, current_depth + 1); // Сортировка правой части
    }
}

// Основная функция быстрой сортировки
void quick_sort(vector<double>& array, size_t& swaps, size_t& calls, size_t& max_depth) {
    swaps = 0;
    calls = 0;
    max_depth = 0;
    quicksort(array, 0, array.size() - 1, swaps, calls, max_depth, 1);
}

int main() {
    int series_count = 8;
    int attempts_per_series = 20;
    vector<int> array_sizes = { 1000, 2000, 4000, 8000, 16000, 32000, 64000, 128000 };

    // Сохранение данных в файл для построения графиков
    ofstream time_file("times.txt");
    ofstream swap_file("swaps.txt");

    ofstream depth_file("depths.txt");
    ofstream calls_file("calls.txt");

    for (int i = 0; i < array_sizes.size(); i++) {
        size_t array_size = array_sizes[i];
        vector<double> times;

        for (int attempt = 0; attempt < attempts_per_series; attempt++) {
            auto array = generate_random_array(array_size);

            chrono::high_resolution_clock::time_point start = chrono::high_resolution_clock::now();
            size_t swap_count = 0, call_count = 0, max_depth = 0;
            quick_sort(array, swap_count, call_count, max_depth);
            chrono::high_resolution_clock::time_point end = chrono::high_resolution_clock::now();

            chrono::duration<double> sec_diff = end - start;
            times.push_back(sec_diff.count());

            time_file << array_sizes[i] << " " << sec_diff.count() << "\n";
            swap_file << array_sizes[i] << " " << swap_count << "\n";

            depth_file << array_sizes[i] << " " << max_depth << "\n";
            calls_file << array_sizes[i] << " " << call_count << "\n";
        }


    }

    time_file.close();
    swap_file.close();
    depth_file.close();
    calls_file.close();

    return 0;
}
