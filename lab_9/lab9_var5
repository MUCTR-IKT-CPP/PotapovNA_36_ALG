#include <cstdint>
#include <cstring>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <iostream>
#include <random>
#include <chrono>
#include <unordered_map>
#include <fstream>

using namespace std;

class RipeMD160 {
private:
    // Регистры для хранения промежуточных значений хеша
    uint32_t h0, h1, h2, h3, h4;
    // Счетчик общего количества обработанных байт
    uint64_t count;
    // Буфер для накопления данных перед обработкой
    uint8_t buffer[64];
    // Массив для хранения текущего обрабатываемого блока
    uint32_t block[16];

    // Константы алгоритма:
    const uint32_t KL[5] = { 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E };
    const uint32_t KR[5] = { 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000 };
    const uint8_t RL[80] = { 11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6 };
    const uint8_t RR[80] = { 8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11 };
    const uint8_t SL[80] = { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13 };
    const uint8_t SR[80] = { 5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11 };

    // Циклический сдвиг влево
    uint32_t rol(uint32_t x, uint8_t n) { return (x << n) | (x >> (32 - n)); }

    // Обработка одного 64-байтного блока
    void processBlock(const uint8_t* data) {
        // Преобразование байтов в 32-битные слова (little-endian)
        for (int i = 0; i < 16; ++i)
            block[i] = (data[i * 4] | (data[i * 4 + 1] << 8) | (data[i * 4 + 2] << 16) | (data[i * 4 + 3] << 24));

        // Инициализация переменных для левой и правой ветвей
        uint32_t al = h0, bl = h1, cl = h2, dl = h3, el = h4;
        uint32_t ar = h0, br = h1, cr = h2, dr = h3, er = h4;

        // Основной цикл обработки (80 шагов)
        for (int i = 0; i < 80; ++i) {
            uint32_t func;
            // Выбор нелинейной функции в зависимости от раунда (левая ветвь)
            if (i < 16) func = (bl ^ cl ^ dl);
            else if (i < 32) func = (bl & cl) | (~bl & dl);
            else if (i < 48) func = (bl | ~cl) ^ dl;
            else if (i < 64) func = (bl & dl) | (cl & ~dl);
            else func = bl ^ (cl | ~dl);

            // Обработка шага левой ветви
            uint32_t T = rol(al + func + block[SL[i]] + KL[i / 16], RL[i]) + el;
            al = el; el = dl; dl = rol(cl, 10); cl = bl; bl = T;

            // Выбор нелинейной функции для правой ветви
            if (i < 16) func = (br ^ cr ^ dr);
            else if (i < 32) func = (br & cr) | (~br & dr);
            else if (i < 48) func = (br | ~cr) ^ dr;
            else if (i < 64) func = (br & dr) | (cr & ~dr);
            else func = br ^ (cr | ~dr);

            // Обработка шага правой ветви
            T = rol(ar + func + block[SR[i]] + KR[i / 16], RR[i]) + er;
            ar = er; er = dr; dr = rol(cr, 10); cr = br; br = T;
        }

        // Обновление регистров хеша
        uint32_t T = h1 + cl + dr;
        h1 = h2 + dl + er;
        h2 = h3 + el + ar;
        h3 = h4 + al + br;
        h4 = h0 + bl + cr;
        h0 = T;
    }

public:
    RipeMD160() { reset(); }

    // Сброс состояния хеш-функции
    void reset() {
        h0 = 0x67452301; h1 = 0xEFCDAB89; h2 = 0x98BADCFE; h3 = 0x10325476; h4 = 0xC3D2E1F0;
        count = 0;
        memset(buffer, 0, 64);
    }

    // Добавление данных для хеширования
    void update(const uint8_t* data, size_t len) {
        size_t index = count % 64;
        count += len;

        // Если в буфере есть данные, сначала заполняем его
        if (index) {
            size_t fill = 64 - index;
            if (len < fill) {
                memcpy(buffer + index, data, len);
                return;
            }
            memcpy(buffer + index, data, fill);
            processBlock(buffer);
            data += fill;
            len -= fill;
        }

        // Обработка полных блоков
        while (len >= 64) {
            processBlock(data);
            data += 64;
            len -= 64;
        }

        // Сохранение оставшихся данных в буфер
        if (len) memcpy(buffer, data, len);
    }

    // Завершение вычислений и получение хеша
    void final(uint8_t* digest) {
        // Добавление padding (бит "1" и нули)
        uint8_t padding[64] = { 0x80 };
        uint64_t bits = count * 8;
        uint8_t bitsLen[8];
        for (int i = 0; i < 8; ++i) bitsLen[i] = (bits >> (i * 8)) & 0xFF;

        // Вычисление длины padding
        size_t index = count % 64;
        size_t padLen = (index < 56) ? (56 - index) : (120 - index);
        update(padding, padLen);
        update(bitsLen, 8);

        // Формирование итогового хеша
        for (int i = 0; i < 4; ++i) {
            digest[i] = h0 >> (i * 8);
            digest[i + 4] = h1 >> (i * 8);
            digest[i + 8] = h2 >> (i * 8);
            digest[i + 12] = h3 >> (i * 8);
            digest[i + 16] = h4 >> (i * 8);
        }
    }

    // Получение хеша в виде HEX-строки
    string hexdigest() {
        uint8_t digest[20];
        final(digest);
        reset();
        ostringstream oss;
        for (int i = 0; i < 20; ++i)
            oss << hex << setw(2) << setfill('0') << (int)digest[i];
        return oss.str();
    }
};

// Генерация случайной строки заданной длины
string generateRandomString(size_t len) {
    static mt19937 gen(random_device{}());
    static uniform_int_distribution<> dis('!', '~');
    string s(len, ' ');
    for (auto& c : s) c = dis(gen);
    return s;
}

// Модификация строки (изменение заданного количества символов)
string modifyString(string s, int changes) {
    static mt19937 gen(random_device{}());
    uniform_int_distribution<size_t> pos(0, s.size() - 1);
    uniform_int_distribution<int> ch('!', '~');

    for (int i = 0; i < changes; ++i) {
        size_t p = pos(gen);
        s[p] = static_cast<char>(ch(gen));
    }
    return s;
}

// Поиск максимальной длины совпадающей подстроки
size_t maxCommonSub(const string& a, const string& b) {
    size_t max = 0, current = 0;
    for (size_t i = 0; i < a.size(); ++i) {
        current = (a[i] == b[i]) ? current + 1 : 0;
        if (current > max) max = current;
    }
    return max;
}

// Тест 1: Анализ лавинного эффекта
void test1() {
    ofstream out("test1.csv");
    out << "Differences,MaxCommon\n";
    const int diffs[] = { 1, 2, 4, 8, 16 };
    for (int d : diffs) {
        size_t maxCommon = 0;
        for (int i = 0; i < 1000; ++i) {
            string s1 = generateRandomString(128);
            string s2 = modifyString(s1, d);
            RipeMD160 md1, md2;
            md1.update((const uint8_t*)s1.data(), s1.size());
            md2.update((const uint8_t*)s2.data(), s2.size());
            string h1 = md1.hexdigest(), h2 = md2.hexdigest();
            maxCommon = max(maxCommon, maxCommonSub(h1, h2));
        }
        out << d << "," << maxCommon << "\n";
    }
}

// Тест 2: Поиск коллизий
void test2() {
    ofstream out("test2.csv");
    out << "N,Collisions\n";
    for (int i = 2; i <= 6; ++i) {
        int N = pow(10, i);
        unordered_map<string, int> counts;
        int collisions = 0;
        for (int j = 0; j < N; ++j) {
            string s = generateRandomString(256);
            RipeMD160 md;
            md.update((const uint8_t*)s.data(), s.size());
            string hash = md.hexdigest();
            collisions += counts[hash]++;
        }
        out << N << "," << collisions << "\n";
    }
}

// Тест 3: Замер производительности
void test3() {
    ofstream out("test3.csv");
    out << "Length,Time(ms)\n";
    const size_t lengths[] = { 64, 128, 256, 512, 1024, 2048, 4096, 8192 };
    for (size_t len : lengths) {
        auto start = chrono::high_resolution_clock::now();
        for (int i = 0; i < 1000; ++i) {
            string s = generateRandomString(len);
            RipeMD160 md;
            md.update((const uint8_t*)s.data(), s.size());
            md.hexdigest();
        }
        auto end = chrono::high_resolution_clock::now();
        double time = chrono::duration<double, milli>(end - start).count();
        out << len << "," << time / 1000 << "\n";
    }
}

int main() {
    test1(); // Тест лавинного эффекта
    test2(); // Тест на коллизии
    test3(); // Тест производительности
    return 0;
}
